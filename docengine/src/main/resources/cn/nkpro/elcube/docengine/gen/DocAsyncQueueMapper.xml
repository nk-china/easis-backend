<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.nkpro.elcube.docengine.gen.DocAsyncQueueMapper">
  <resultMap id="BaseResultMap" type="cn.nkpro.elcube.docengine.gen.DocAsyncQueue">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="ASYNC_ID" jdbcType="VARCHAR" property="asyncId" />
    <result column="ASYNC_OBJECT_REF" jdbcType="VARCHAR" property="asyncObjectRef" />
    <result column="ASYNC_RETRY" jdbcType="INTEGER" property="asyncRetry" />
    <result column="ASYNC_LIMIT" jdbcType="INTEGER" property="asyncLimit" />
    <result column="ASYNC_RULE" jdbcType="VARCHAR" property="asyncRule" />
    <result column="ASYNC_STATE" jdbcType="VARCHAR" property="asyncState" />
    <result column="ASYNC_NEXT" jdbcType="VARCHAR" property="asyncNext" />
    <result column="CREATED_TIME" jdbcType="BIGINT" property="createdTime" />
    <result column="UPDATED_TIME" jdbcType="BIGINT" property="updatedTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.nkpro.elcube.docengine.gen.DocAsyncQueueWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="ASYNC_JSON" jdbcType="LONGVARCHAR" property="asyncJson" />
    <result column="ASYNC_CAUSE_STACK_TRACE" jdbcType="LONGVARCHAR" property="asyncCauseStackTrace" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    ASYNC_ID, ASYNC_OBJECT_REF, ASYNC_RETRY, ASYNC_LIMIT, ASYNC_RULE, ASYNC_STATE, ASYNC_NEXT, 
    CREATED_TIME, UPDATED_TIME
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    ASYNC_JSON, ASYNC_CAUSE_STACK_TRACE
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.nkpro.elcube.docengine.gen.DocAsyncQueueExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from nk_doc_async_queue
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.nkpro.elcube.docengine.gen.DocAsyncQueueExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from nk_doc_async_queue
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from nk_doc_async_queue
    where ASYNC_ID = #{asyncId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from nk_doc_async_queue
    where ASYNC_ID = #{asyncId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="cn.nkpro.elcube.docengine.gen.DocAsyncQueueWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into nk_doc_async_queue (ASYNC_ID, ASYNC_OBJECT_REF, ASYNC_RETRY, 
      ASYNC_LIMIT, ASYNC_RULE, ASYNC_STATE, 
      ASYNC_NEXT, CREATED_TIME, UPDATED_TIME, 
      ASYNC_JSON, ASYNC_CAUSE_STACK_TRACE
      )
    values (#{asyncId,jdbcType=VARCHAR}, #{asyncObjectRef,jdbcType=VARCHAR}, #{asyncRetry,jdbcType=INTEGER}, 
      #{asyncLimit,jdbcType=INTEGER}, #{asyncRule,jdbcType=VARCHAR}, #{asyncState,jdbcType=VARCHAR}, 
      #{asyncNext,jdbcType=VARCHAR}, #{createdTime,jdbcType=BIGINT}, #{updatedTime,jdbcType=BIGINT}, 
      #{asyncJson,jdbcType=LONGVARCHAR}, #{asyncCauseStackTrace,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.nkpro.elcube.docengine.gen.DocAsyncQueueWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into nk_doc_async_queue
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="asyncId != null">
        ASYNC_ID,
      </if>
      <if test="asyncObjectRef != null">
        ASYNC_OBJECT_REF,
      </if>
      <if test="asyncRetry != null">
        ASYNC_RETRY,
      </if>
      <if test="asyncLimit != null">
        ASYNC_LIMIT,
      </if>
      <if test="asyncRule != null">
        ASYNC_RULE,
      </if>
      <if test="asyncState != null">
        ASYNC_STATE,
      </if>
      <if test="asyncNext != null">
        ASYNC_NEXT,
      </if>
      <if test="createdTime != null">
        CREATED_TIME,
      </if>
      <if test="updatedTime != null">
        UPDATED_TIME,
      </if>
      <if test="asyncJson != null">
        ASYNC_JSON,
      </if>
      <if test="asyncCauseStackTrace != null">
        ASYNC_CAUSE_STACK_TRACE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="asyncId != null">
        #{asyncId,jdbcType=VARCHAR},
      </if>
      <if test="asyncObjectRef != null">
        #{asyncObjectRef,jdbcType=VARCHAR},
      </if>
      <if test="asyncRetry != null">
        #{asyncRetry,jdbcType=INTEGER},
      </if>
      <if test="asyncLimit != null">
        #{asyncLimit,jdbcType=INTEGER},
      </if>
      <if test="asyncRule != null">
        #{asyncRule,jdbcType=VARCHAR},
      </if>
      <if test="asyncState != null">
        #{asyncState,jdbcType=VARCHAR},
      </if>
      <if test="asyncNext != null">
        #{asyncNext,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=BIGINT},
      </if>
      <if test="updatedTime != null">
        #{updatedTime,jdbcType=BIGINT},
      </if>
      <if test="asyncJson != null">
        #{asyncJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="asyncCauseStackTrace != null">
        #{asyncCauseStackTrace,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.nkpro.elcube.docengine.gen.DocAsyncQueueExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from nk_doc_async_queue
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update nk_doc_async_queue
    <set>
      <if test="record.asyncId != null">
        ASYNC_ID = #{record.asyncId,jdbcType=VARCHAR},
      </if>
      <if test="record.asyncObjectRef != null">
        ASYNC_OBJECT_REF = #{record.asyncObjectRef,jdbcType=VARCHAR},
      </if>
      <if test="record.asyncRetry != null">
        ASYNC_RETRY = #{record.asyncRetry,jdbcType=INTEGER},
      </if>
      <if test="record.asyncLimit != null">
        ASYNC_LIMIT = #{record.asyncLimit,jdbcType=INTEGER},
      </if>
      <if test="record.asyncRule != null">
        ASYNC_RULE = #{record.asyncRule,jdbcType=VARCHAR},
      </if>
      <if test="record.asyncState != null">
        ASYNC_STATE = #{record.asyncState,jdbcType=VARCHAR},
      </if>
      <if test="record.asyncNext != null">
        ASYNC_NEXT = #{record.asyncNext,jdbcType=VARCHAR},
      </if>
      <if test="record.createdTime != null">
        CREATED_TIME = #{record.createdTime,jdbcType=BIGINT},
      </if>
      <if test="record.updatedTime != null">
        UPDATED_TIME = #{record.updatedTime,jdbcType=BIGINT},
      </if>
      <if test="record.asyncJson != null">
        ASYNC_JSON = #{record.asyncJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.asyncCauseStackTrace != null">
        ASYNC_CAUSE_STACK_TRACE = #{record.asyncCauseStackTrace,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update nk_doc_async_queue
    set ASYNC_ID = #{record.asyncId,jdbcType=VARCHAR},
      ASYNC_OBJECT_REF = #{record.asyncObjectRef,jdbcType=VARCHAR},
      ASYNC_RETRY = #{record.asyncRetry,jdbcType=INTEGER},
      ASYNC_LIMIT = #{record.asyncLimit,jdbcType=INTEGER},
      ASYNC_RULE = #{record.asyncRule,jdbcType=VARCHAR},
      ASYNC_STATE = #{record.asyncState,jdbcType=VARCHAR},
      ASYNC_NEXT = #{record.asyncNext,jdbcType=VARCHAR},
      CREATED_TIME = #{record.createdTime,jdbcType=BIGINT},
      UPDATED_TIME = #{record.updatedTime,jdbcType=BIGINT},
      ASYNC_JSON = #{record.asyncJson,jdbcType=LONGVARCHAR},
      ASYNC_CAUSE_STACK_TRACE = #{record.asyncCauseStackTrace,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update nk_doc_async_queue
    set ASYNC_ID = #{record.asyncId,jdbcType=VARCHAR},
      ASYNC_OBJECT_REF = #{record.asyncObjectRef,jdbcType=VARCHAR},
      ASYNC_RETRY = #{record.asyncRetry,jdbcType=INTEGER},
      ASYNC_LIMIT = #{record.asyncLimit,jdbcType=INTEGER},
      ASYNC_RULE = #{record.asyncRule,jdbcType=VARCHAR},
      ASYNC_STATE = #{record.asyncState,jdbcType=VARCHAR},
      ASYNC_NEXT = #{record.asyncNext,jdbcType=VARCHAR},
      CREATED_TIME = #{record.createdTime,jdbcType=BIGINT},
      UPDATED_TIME = #{record.updatedTime,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.nkpro.elcube.docengine.gen.DocAsyncQueueWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update nk_doc_async_queue
    <set>
      <if test="asyncObjectRef != null">
        ASYNC_OBJECT_REF = #{asyncObjectRef,jdbcType=VARCHAR},
      </if>
      <if test="asyncRetry != null">
        ASYNC_RETRY = #{asyncRetry,jdbcType=INTEGER},
      </if>
      <if test="asyncLimit != null">
        ASYNC_LIMIT = #{asyncLimit,jdbcType=INTEGER},
      </if>
      <if test="asyncRule != null">
        ASYNC_RULE = #{asyncRule,jdbcType=VARCHAR},
      </if>
      <if test="asyncState != null">
        ASYNC_STATE = #{asyncState,jdbcType=VARCHAR},
      </if>
      <if test="asyncNext != null">
        ASYNC_NEXT = #{asyncNext,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null">
        CREATED_TIME = #{createdTime,jdbcType=BIGINT},
      </if>
      <if test="updatedTime != null">
        UPDATED_TIME = #{updatedTime,jdbcType=BIGINT},
      </if>
      <if test="asyncJson != null">
        ASYNC_JSON = #{asyncJson,jdbcType=LONGVARCHAR},
      </if>
      <if test="asyncCauseStackTrace != null">
        ASYNC_CAUSE_STACK_TRACE = #{asyncCauseStackTrace,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where ASYNC_ID = #{asyncId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.nkpro.elcube.docengine.gen.DocAsyncQueueWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update nk_doc_async_queue
    set ASYNC_OBJECT_REF = #{asyncObjectRef,jdbcType=VARCHAR},
      ASYNC_RETRY = #{asyncRetry,jdbcType=INTEGER},
      ASYNC_LIMIT = #{asyncLimit,jdbcType=INTEGER},
      ASYNC_RULE = #{asyncRule,jdbcType=VARCHAR},
      ASYNC_STATE = #{asyncState,jdbcType=VARCHAR},
      ASYNC_NEXT = #{asyncNext,jdbcType=VARCHAR},
      CREATED_TIME = #{createdTime,jdbcType=BIGINT},
      UPDATED_TIME = #{updatedTime,jdbcType=BIGINT},
      ASYNC_JSON = #{asyncJson,jdbcType=LONGVARCHAR},
      ASYNC_CAUSE_STACK_TRACE = #{asyncCauseStackTrace,jdbcType=LONGVARCHAR}
    where ASYNC_ID = #{asyncId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.nkpro.elcube.docengine.gen.DocAsyncQueue">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update nk_doc_async_queue
    set ASYNC_OBJECT_REF = #{asyncObjectRef,jdbcType=VARCHAR},
      ASYNC_RETRY = #{asyncRetry,jdbcType=INTEGER},
      ASYNC_LIMIT = #{asyncLimit,jdbcType=INTEGER},
      ASYNC_RULE = #{asyncRule,jdbcType=VARCHAR},
      ASYNC_STATE = #{asyncState,jdbcType=VARCHAR},
      ASYNC_NEXT = #{asyncNext,jdbcType=VARCHAR},
      CREATED_TIME = #{createdTime,jdbcType=BIGINT},
      UPDATED_TIME = #{updatedTime,jdbcType=BIGINT}
    where ASYNC_ID = #{asyncId,jdbcType=VARCHAR}
  </update>
</mapper>