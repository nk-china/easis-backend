package cn.nkpro.elcube.docengine.gen;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import java.io.Serializable;

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class DocDefI extends DocDefIKey implements Serializable {
    private String beanName;

    private String cardName;

    private Integer orderBy;

    private Integer calcOrder;

    private Integer calcTimes;

    private String editableSpEL;

    private Integer markdownFlag;

    private Long updatedTime;

    /**
     * 从前序单据或参考单据复制数据
     *
     * @mbggenerated
     */
    private Integer copyFromRef;

    /**
     * 是否显示表达式
     *
     * @mbggenerated
     */
    private String visibleSpEL;

    /**
     * 卡片分组
     *
     * @mbggenerated
     */
    private String groupName;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table nk_doc_def_i
     *
     * @mbggenerated
     */
    private static final long serialVersionUID = 1L;

    @cn.nkpro.elcube.annotation.CodeFieldNotes("")
    public String getBeanName() {
        return beanName;
    }

    public void setBeanName(String beanName) {
        this.beanName = beanName;
    }

    @cn.nkpro.elcube.annotation.CodeFieldNotes("")
    public String getCardName() {
        return cardName;
    }

    public void setCardName(String cardName) {
        this.cardName = cardName;
    }

    @cn.nkpro.elcube.annotation.CodeFieldNotes("")
    public Integer getOrderBy() {
        return orderBy;
    }

    public void setOrderBy(Integer orderBy) {
        this.orderBy = orderBy;
    }

    @cn.nkpro.elcube.annotation.CodeFieldNotes("")
    public Integer getCalcOrder() {
        return calcOrder;
    }

    public void setCalcOrder(Integer calcOrder) {
        this.calcOrder = calcOrder;
    }

    @cn.nkpro.elcube.annotation.CodeFieldNotes("")
    public Integer getCalcTimes() {
        return calcTimes;
    }

    public void setCalcTimes(Integer calcTimes) {
        this.calcTimes = calcTimes;
    }

    @cn.nkpro.elcube.annotation.CodeFieldNotes("")
    public String getEditableSpEL() {
        return editableSpEL;
    }

    public void setEditableSpEL(String editableSpEL) {
        this.editableSpEL = editableSpEL;
    }

    @cn.nkpro.elcube.annotation.CodeFieldNotes("")
    public Integer getMarkdownFlag() {
        return markdownFlag;
    }

    public void setMarkdownFlag(Integer markdownFlag) {
        this.markdownFlag = markdownFlag;
    }

    @cn.nkpro.elcube.annotation.CodeFieldNotes("")
    public Long getUpdatedTime() {
        return updatedTime;
    }

    public void setUpdatedTime(Long updatedTime) {
        this.updatedTime = updatedTime;
    }

    /**
     * 获取 从前序单据或参考单据复制数据
     *
     * @return 从前序单据或参考单据复制数据
     *
     * @mbggenerated
     */
    @cn.nkpro.elcube.annotation.CodeFieldNotes("从前序单据或参考单据复制数据")
    public Integer getCopyFromRef() {
        return copyFromRef;
    }

    /**
     * 设置 从前序单据或参考单据复制数据
     *
     * @return 从前序单据或参考单据复制数据
     *
     * @mbggenerated
     */
    public void setCopyFromRef(Integer copyFromRef) {
        this.copyFromRef = copyFromRef;
    }

    /**
     * 获取 是否显示表达式
     *
     * @return 是否显示表达式
     *
     * @mbggenerated
     */
    @cn.nkpro.elcube.annotation.CodeFieldNotes("是否显示表达式")
    public String getVisibleSpEL() {
        return visibleSpEL;
    }

    /**
     * 设置 是否显示表达式
     *
     * @return 是否显示表达式
     *
     * @mbggenerated
     */
    public void setVisibleSpEL(String visibleSpEL) {
        this.visibleSpEL = visibleSpEL;
    }

    /**
     * 获取 卡片分组
     *
     * @return 卡片分组
     *
     * @mbggenerated
     */
    @cn.nkpro.elcube.annotation.CodeFieldNotes("卡片分组")
    public String getGroupName() {
        return groupName;
    }

    /**
     * 设置 卡片分组
     *
     * @return 卡片分组
     *
     * @mbggenerated
     */
    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }
}