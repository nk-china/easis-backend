/*
 * This file is part of ELCard.
 *
 * ELCard is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ELCard is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with ELCard.  If not, see <https://www.gnu.org/licenses/>.
 */
package cn.nkpro.elcard.docengine.gen;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import java.io.Serializable;

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
public class DocDefI extends DocDefIKey implements Serializable {
    private String beanName;

    private String cardName;

    private Integer orderBy;

    private Integer calcOrder;

    private Integer calcTimes;

    private String editableSpEL;

    private Integer markdownFlag;

    private Long updatedTime;

    /**
     * 从前序单据或参考单据复制数据
     *
     * @mbggenerated
     */
    private Integer copyFromRef;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table nk_doc_def_i
     *
     * @mbggenerated
     */
    private static final long serialVersionUID = 1L;

    @cn.nkpro.elcard.annotation.CodeFieldNotes("")
    public String getBeanName() {
        return beanName;
    }

    public void setBeanName(String beanName) {
        this.beanName = beanName;
    }

    @cn.nkpro.elcard.annotation.CodeFieldNotes("")
    public String getCardName() {
        return cardName;
    }

    public void setCardName(String cardName) {
        this.cardName = cardName;
    }

    @cn.nkpro.elcard.annotation.CodeFieldNotes("")
    public Integer getOrderBy() {
        return orderBy;
    }

    public void setOrderBy(Integer orderBy) {
        this.orderBy = orderBy;
    }

    @cn.nkpro.elcard.annotation.CodeFieldNotes("")
    public Integer getCalcOrder() {
        return calcOrder;
    }

    public void setCalcOrder(Integer calcOrder) {
        this.calcOrder = calcOrder;
    }

    @cn.nkpro.elcard.annotation.CodeFieldNotes("")
    public Integer getCalcTimes() {
        return calcTimes;
    }

    public void setCalcTimes(Integer calcTimes) {
        this.calcTimes = calcTimes;
    }

    @cn.nkpro.elcard.annotation.CodeFieldNotes("")
    public String getEditableSpEL() {
        return editableSpEL;
    }

    public void setEditableSpEL(String editableSpEL) {
        this.editableSpEL = editableSpEL;
    }

    @cn.nkpro.elcard.annotation.CodeFieldNotes("")
    public Integer getMarkdownFlag() {
        return markdownFlag;
    }

    public void setMarkdownFlag(Integer markdownFlag) {
        this.markdownFlag = markdownFlag;
    }

    @cn.nkpro.elcard.annotation.CodeFieldNotes("")
    public Long getUpdatedTime() {
        return updatedTime;
    }

    public void setUpdatedTime(Long updatedTime) {
        this.updatedTime = updatedTime;
    }

    /**
     * 获取 从前序单据或参考单据复制数据
     *
     * @return 从前序单据或参考单据复制数据
     *
     * @mbggenerated
     */
    @cn.nkpro.elcard.annotation.CodeFieldNotes("从前序单据或参考单据复制数据")
    public Integer getCopyFromRef() {
        return copyFromRef;
    }

    /**
     * 设置 从前序单据或参考单据复制数据
     *
     * @return 从前序单据或参考单据复制数据
     *
     * @mbggenerated
     */
    public void setCopyFromRef(Integer copyFromRef) {
        this.copyFromRef = copyFromRef;
    }
}